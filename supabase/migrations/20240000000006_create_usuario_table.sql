-- Cria a tabela de usuários
CREATE TABLE IF NOT EXISTS public.usuario (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome TEXT NOT NULL,
    apelido TEXT,
    email TEXT NOT NULL UNIQUE,
    telefone TEXT,
    endereco TEXT,
    cep TEXT,
    tipo TEXT NOT NULL,
    avatar_url TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Cria índices para consultas frequentes
CREATE INDEX IF NOT EXISTS idx_usuario_email ON public.usuario(email);
CREATE INDEX IF NOT EXISTS idx_usuario_tipo ON public.usuario(tipo);

-- Habilita RLS (Row Level Security)
ALTER TABLE public.usuario ENABLE ROW LEVEL SECURITY;

-- Cria políticas de segurança
CREATE POLICY "Allow all access to authenticated users"
    ON public.usuario
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Cria função para atualizar o campo updated_at
CREATE OR REPLACE FUNCTION update_usuario_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Cria trigger para atualizar o campo updated_at
CREATE TRIGGER update_usuario_timestamp_trigger
    BEFORE UPDATE ON public.usuario
    FOR EACH ROW
    EXECUTE FUNCTION update_usuario_timestamp();
