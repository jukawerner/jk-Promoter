-- Create system_logs table
CREATE TABLE IF NOT EXISTS public.system_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    level VARCHAR(20) NOT NULL,
    message TEXT NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    user_id UUID REFERENCES auth.users(id),
    metadata JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create index for faster queries
CREATE INDEX IF NOT EXISTS idx_system_logs_level ON public.system_logs(level);
CREATE INDEX IF NOT EXISTS idx_system_logs_timestamp ON public.system_logs(timestamp);
CREATE INDEX IF NOT EXISTS idx_system_logs_user_id ON public.system_logs(user_id);

-- Create rate_limits table
CREATE TABLE IF NOT EXISTS public.rate_limits (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id TEXT NOT NULL,
    timestamp BIGINT NOT NULL,
    path TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create index for rate limiting queries
CREATE INDEX IF NOT EXISTS idx_rate_limits_client_timestamp ON public.rate_limits(client_id, timestamp);

-- Enable RLS
ALTER TABLE public.system_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rate_limits ENABLE ROW LEVEL SECURITY;

-- Create policies for system_logs
CREATE POLICY "Allow insert for authenticated users"
    ON public.system_logs
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Allow select for authenticated users"
    ON public.system_logs
    FOR SELECT
    TO authenticated
    USING (true);

-- Create policies for rate_limits
CREATE POLICY "Allow all operations for authenticated users"
    ON public.rate_limits
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Function to clean old logs
CREATE OR REPLACE FUNCTION clean_old_logs()
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
    -- Delete logs older than 30 days
    DELETE FROM public.system_logs
    WHERE timestamp < NOW() - INTERVAL '30 days';
    
    -- Delete rate limit records older than 1 hour
    DELETE FROM public.rate_limits
    WHERE timestamp < EXTRACT(EPOCH FROM NOW() - INTERVAL '1 hour') * 1000;
END;
$$;

-- Create a scheduled job to clean old logs
SELECT cron.schedule(
    'clean_old_logs_job',
    '0 0 * * *', -- Run at midnight every day
    'SELECT clean_old_logs();'
);
